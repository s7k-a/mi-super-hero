// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ (–±—Ä–∞—É–∑–µ—Ä)
const IS_TEST_ENV = !window.Telegram?.WebApp?.initDataUnsafe?.user;

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
    if (window.Telegram?.WebApp) {
      Telegram.WebApp.ready();
      Telegram.WebApp.expand();
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
    if (IS_TEST_ENV) {
      console.log('–ó–∞–ø—É—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ');
      window.Telegram = {
        WebApp: {
          initData: 'test_mode',
          initDataUnsafe: {
            user: {
              phone_number: "+79999999999"
            }
          },
          ready: () => console.log('Test ready'),
          expand: () => console.log('Test expand')
        }
      };
    }
    
    const initData = window.Telegram?.WebApp?.initData;
    const userPhone = window.Telegram?.WebApp?.initDataUnsafe?.user?.phone_number;
    
    console.log('–†–µ–∂–∏–º:', IS_TEST_ENV ? '–¢–µ—Å—Ç–æ–≤—ã–π' : 'Telegram');
    console.log('InitData:', initData);
    console.log('UserPhone:', userPhone);
    
    if (!initData) {
      showError("‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞:\n1. –ù–∞–∂–º–∏—Ç–µ START\n2. –û—Ç–∫—Ä–æ–π—Ç–µ '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'");
      return;
    }
    
    if (!userPhone) {
      showError("üì± –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–º–µ—Ä—É\n–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram");
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    const employee = await findEmployee(userPhone);
    console.log('–ù–∞–π–¥–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫:', employee);
    
    if (employee) {
      showProfile(employee);
    } else {
      showError("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω\n–í–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ");
    }
    
  } catch (error) {
    showError("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
    console.error("–û—à–∏–±–∫–∞:", error);
  }
}

// –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
async function findEmployee(phone) {
  try {
    if (!phone) {
      console.error('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
      return null;
    }

    const cleanPhone = normalizePhone(phone);
    console.log('–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É:', cleanPhone);
    
    const response = await fetch('./data/employees.json');
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${response.status} ${response.statusText}`);
    }
    
    const employees = await response.json();
    console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', employees.length);
    
    const found = employees.find(e => normalizePhone(e.phone) === cleanPhone);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:', found ? '–ù–∞–π–¥–µ–Ω' : '–ù–µ –Ω–∞–π–¥–µ–Ω');
    
    return found;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', error);
    throw error;
  }
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function normalizePhone(phone) {
  if (!phone) return '';
  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É 7XXXXXXXXXX
  const cleaned = phone.replace(/\D/g, '');
  if (cleaned.startsWith('8')) {
    return '7' + cleaned.slice(1);
  }
  return cleaned;
}

// –ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è
function showProfile(employee) {
  document.getElementById('app').innerHTML = `
    <div style="text-align: center; padding: 20px;">
      <img src="${employee.photo}" width="100" style="border-radius:50%">
      <h2>${employee.name}</h2>
      <p>${employee.position}</p>
    </div>
  `;
}

// –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
function showError(message) {
  document.getElementById('app').innerHTML = `
    <div style="text-align: center; padding: 20px; color: red;">
      <h2>${message}</h2>
    </div>
  `;
}

// –ó–∞–ø—É—Å–∫
main();
// –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–µ—Ä–≤–µ—Ä)
const users = {
  "admin": { password: "admin123", name: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", position: "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å" },
  "user1": { password: "pass123", name: "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω", position: "–ü—Ä–æ–¥–∞–≤–µ—Ü" }
};

function authUser() {
  const login = document.getElementById('login').value;
  const password = document.getElementById('password').value;

  if (users[login] && users[login].password === password) {
    document.getElementById('auth-form').style.display = 'none';
    document.getElementById('profile').style.display = 'block';
    showProfile(users[login]);
  } else {
    alert("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
  }
}

function showProfile(user) {
  document.getElementById('profile').innerHTML = `
    <div style="text-align: center">
      <h2>${user.name}</h2>
      <p>${user.position}</p>
      <button onclick="logout()" style="padding: 5px 10px; margin-top: 20px;">
        –í—ã–π—Ç–∏
      </button>
    </div>
  `;
}

function logout() {
  document.getElementById('auth-form').style.display = 'block';
  document.getElementById('profile').style.display = 'none';
}