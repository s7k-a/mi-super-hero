// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (typeof Telegram === 'undefined') {
  console.log('–°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è Telegram WebApp');
  window.Telegram = {
    WebApp: {
      initDataUnsafe: {
        user: null
      },
      ready: () => {},
      expand: () => {}
    }
  };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∏–ª–µ–π
const styles = `
  .container {
    max-width: 400px;
    margin: 20px auto;
    padding: 20px;
  }
  .input-field {
    width: 100%;
    padding: 12px;
    margin: 8px 0;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 16px;
  }
  .btn {
    width: 100%;
    padding: 12px;
    margin: 8px 0;
    background: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 16px;
    cursor: pointer;
  }
  .btn:hover {
    background: #0056b3;
  }
  .message {
    padding: 15px;
    margin: 10px 0;
    border-radius: 4px;
    text-align: center;
  }
  .error {
    background: #ffe6e6;
    color: #ff0000;
  }
  .profile {
    text-align: center;
  }
  .profile-photo {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    margin: 10px auto;
  }
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
const styleSheet = document.createElement("style");
styleSheet.textContent = styles;
document.head.appendChild(styleSheet);

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
document.addEventListener('DOMContentLoaded', () => {
  console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');
  checkAuth();
});

// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä –∏–∑ Telegram
const userPhone = Telegram.WebApp.initDataUnsafe.user?.phone_number;
console.log('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ Telegram:', userPhone);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
function showMessage(message, isError = false) {
  const app = document.getElementById('app');
  app.innerHTML = `
    <div class="container">
      <div class="message ${isError ? 'error' : ''}">
        <p>${message}</p>
        <button class="btn" onclick="showLoginForm()">–ù–∞–∑–∞–¥</button>
      </div>
    </div>
  `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
function showProfile(employee) {
  const app = document.getElementById('app');
  app.innerHTML = `
    <div class="container profile">
      <img src="${employee.photo}" alt="${employee.name}" class="profile-photo">
      <h2>${employee.name}</h2>
      <p>${employee.position}</p>
      <p>${employee.store}</p>
    </div>
  `;
}

// 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
async function checkAuth() {
  try {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    const response = await fetch('test-data.json');
    
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${response.status}`);
    }
    
    const employees = await response.json();
    console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', employees);
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä–∞ (—É–±–∏—Ä–∞–µ–º +, –ø—Ä–æ–±–µ–ª—ã)
    const cleanUserPhone = userPhone?.replace(/\D/g, '');
    console.log('–û—á–∏—â–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', cleanUserPhone);
    
    const foundEmployee = employees.find(e => 
      e.phone.replace(/\D/g, '') === cleanUserPhone
    );
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', foundEmployee ? '–ù–∞–π–¥–µ–Ω' : '–ù–µ –Ω–∞–π–¥–µ–Ω');

    if (foundEmployee) {
      // –ù–æ–º–µ—Ä –µ—Å—Ç—å –≤ –±–∞–∑–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      showProfile(foundEmployee);
    } else if (userPhone) {
      // –ù–æ–º–µ—Ä –ø–µ—Ä–µ–¥–∞–Ω, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω
      showMessage("üö´ –í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
    } else {
      // –ù–æ–º–µ—Ä –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω (–æ—Ç–∫—Ä—ã–ª–∏ –Ω–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞)
      console.log('–ù–æ–º–µ—Ä –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞');
      showLoginForm(); 
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    showMessage("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: " + error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
function showLoginForm() {
  const app = document.getElementById('app');
  app.innerHTML = `
    <div class="container">
      <h2>–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h2>
      <input type="tel" id="phone" class="input-field" placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79XXXXXXXXX)">
      <button class="btn" onclick="checkPhone()">–í–æ–π—Ç–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É</button>
      
      <div style="margin: 20px 0; text-align: center;">–∏–ª–∏</div>
      
      <input type="text" id="login" class="input-field" placeholder="–õ–æ–≥–∏–Ω">
      <input type="password" id="password" class="input-field" placeholder="–ü–∞—Ä–æ–ª—å">
      <button class="btn" onclick="checkLoginPassword()">–í–æ–π—Ç–∏ –ø–æ –ª–æ–≥–∏–Ω—É</button>
    </div>
  `;
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async function checkPhone() {
  const phoneInput = document.getElementById('phone');
  const phone = phoneInput.value.trim();
  
  if (!phone) {
    showMessage('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', true);
    return;
  }

  try {
    const response = await fetch('test-data.json');
    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    
    const employees = await response.json();
    const cleanPhone = phone.replace(/\D/g, '');
    const employee = employees.find(e => e.phone.replace(/\D/g, '') === cleanPhone);

    if (employee) {
      showProfile(employee);
    } else {
      showMessage('–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ', true);
    }
  } catch (error) {
    showMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö', true);
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
async function checkLoginPassword() {
  const login = document.getElementById('login').value.trim();
  const password = document.getElementById('password').value.trim();
  
  if (!login || !password) {
    showMessage('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å', true);
    return;
  }

  try {
    const response = await fetch('test-data.json');
    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    
    const employees = await response.json();
    const employee = employees.find(e => e.login === login && e.password === password);

    if (employee) {
      showProfile(employee);
    } else {
      showMessage('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å', true);
    }
  } catch (error) {
    showMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö', true);
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É Telegram WebApp
if (!Telegram.WebApp.initDataUnsafe.user) {
  console.log('–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
  // –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
  Telegram.WebApp.initDataUnsafe = { 
    user: {
      phone_number: "+79253555985" // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º
    }
  };
}