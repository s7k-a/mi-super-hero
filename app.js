// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä –∏–∑ Telegram
const userPhone = Telegram.WebApp.initDataUnsafe.user?.phone_number;
console.log('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ Telegram:', userPhone);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
function showMessage(message) {
  document.getElementById('app').innerHTML = `
    <div class="message">
      <p>${message}</p>
    </div>
  `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
function showProfile(employee) {
  document.getElementById('app').innerHTML = `
    <div class="profile">
      <img src="${employee.photo}" alt="${employee.name}" class="profile-photo">
      <h2>${employee.name}</h2>
      <p class="position">${employee.position}</p>
      <p class="store">${employee.store}</p>
    </div>
  `;
}

// 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
async function checkAuth() {
  try {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    const response = await fetch('test-data.json');
    
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${response.status}`);
    }
    
    const employees = await response.json();
    console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', employees);
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä–∞ (—É–±–∏—Ä–∞–µ–º +, –ø—Ä–æ–±–µ–ª—ã)
    const cleanUserPhone = userPhone?.replace(/\D/g, '');
    console.log('–û—á–∏—â–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', cleanUserPhone);
    
    const foundEmployee = employees.find(e => 
      e.phone.replace(/\D/g, '') === cleanUserPhone
    );
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', foundEmployee ? '–ù–∞–π–¥–µ–Ω' : '–ù–µ –Ω–∞–π–¥–µ–Ω');

    if (foundEmployee) {
      // –ù–æ–º–µ—Ä –µ—Å—Ç—å –≤ –±–∞–∑–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      showProfile(foundEmployee);
    } else if (userPhone) {
      // –ù–æ–º–µ—Ä –ø–µ—Ä–µ–¥–∞–Ω, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω
      showMessage("üö´ –í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
    } else {
      // –ù–æ–º–µ—Ä –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω (–æ—Ç–∫—Ä—ã–ª–∏ –Ω–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞)
      console.log('–ù–æ–º–µ—Ä –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞');
      showLoginForm(); 
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    showMessage("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: " + error.message);
  }
}

// 3. –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –¥–ª—è "—Ä—É—á–Ω–æ–≥–æ" –≤–≤–æ–¥–∞
function showLoginForm() {
  document.getElementById('app').innerHTML = `
    <div class="auth-form">
      <h2>–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h2>
      <div class="tab-container">
        <div class="tabs">
          <button id="tab-phone" class="tab-btn active" onclick="showTab('phone')">–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É</button>
          <button id="tab-login" class="tab-btn" onclick="showTab('login')">–ü–æ –ª–æ–≥–∏–Ω—É</button>
        </div>
        
        <div id="phone-tab" class="tab-content active">
          <input type="tel" id="phone" placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79XXXXXXXXX)">
          <button onclick="phoneAuth()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
        </div>
        
        <div id="login-tab" class="tab-content">
          <input type="text" id="login" placeholder="–õ–æ–≥–∏–Ω">
          <input type="password" id="password" placeholder="–ü–∞—Ä–æ–ª—å">
          <button onclick="manualAuth()">–í–æ–π—Ç–∏</button>
        </div>
      </div>
    </div>
  `;
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
  const style = document.createElement('style');
  style.textContent = `
    .tab-container { width: 100%; }
    .tabs { display: flex; margin-bottom: 10px; }
    .tab-btn { flex: 1; padding: 10px; cursor: pointer; background: #f1f1f1; border: none; }
    .tab-btn.active { background: #007bff; color: white; }
    .tab-content { display: none; padding: 15px 0; }
    .tab-content.active { display: block; }
  `;
  document.head.appendChild(style);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
function showTab(tabName) {
  // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
  document.querySelectorAll('.tab-content').forEach(tab => {
    tab.classList.remove('active');
  });
  document.querySelectorAll('.tab-btn').forEach(btn => {
    btn.classList.remove('active');
  });
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
  document.getElementById(`${tabName}-tab`).classList.add('active');
  document.getElementById(`tab-${tabName}`).classList.add('active');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
async function phoneAuth() {
  try {
    const phone = document.getElementById('phone').value;
    console.log('–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:', phone);
    
    if (!phone) {
      showMessage("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
      return;
    }
    
    const response = await fetch('test-data.json');
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${response.status}`);
    }
    
    const employees = await response.json();
    const cleanPhone = phone.replace(/\D/g, '');
    const employee = employees.find(e => e.phone.replace(/\D/g, '') === cleanPhone);
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', employee ? '–£—Å–ø–µ—à–Ω–æ' : '–û—Ç–∫–∞–∑–∞–Ω–æ');
    
    if (employee) {
      showProfile(employee);
    } else {
      showMessage("‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ");
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:', error);
    showMessage("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: " + error.message);
  }
}

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
async function manualAuth() {
  try {
    const login = document.getElementById('login').value;
    const password = document.getElementById('password').value;
    
    console.log('–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –ª–æ–≥–∏–Ω–æ–º:', login);
    
    const response = await fetch('test-data.json');
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${response.status}`);
    }
    
    const employees = await response.json();
    const employee = employees.find(e => e.login === login && e.password === password);
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è:', employee ? '–£—Å–ø–µ—à–Ω–æ' : '–û—Ç–∫–∞–∑–∞–Ω–æ');
    
    if (employee) {
      showProfile(employee);
    } else {
      showMessage("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    showMessage("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: " + error.message);
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É Telegram WebApp
if (!Telegram.WebApp.initDataUnsafe.user) {
  console.log('–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
  // –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
  Telegram.WebApp.initDataUnsafe = { 
    user: {
      phone_number: "+79253555985" // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º
    }
  };
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkAuth();